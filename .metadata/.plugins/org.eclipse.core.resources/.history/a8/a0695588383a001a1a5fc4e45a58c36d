package com.Graph.Problems;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Vector;

public class EndOfArray {
	
	static int getMinStepsToReachEnd(int arr[], int N) {
		
		boolean[] visit=new boolean[N];
		
		int[] distance=new int[N];
		
		Vector<Integer> digit[]=new Vector[10];
		
		for(int i=0;i<10;i++) {
			
			digit[i]=new Vector<>();
			
		}
		
		for(int i=0;i< N; i++) {
			visit[i]=false;
		}
		
		for(int i=1;i<N;i++) {
			
			digit[arr[i]].add(i);
		}
		
		distance[0]=0;
		visit[0]=true;
		
		Queue<Integer> q=new LinkedList<>();
		q.add(0);
		
		while(!q.isEmpty()) {
			
			int idx=q.peek();
			q.remove();
			
			if(idx==N-1)
				break;
			
			int d=arr[idx];
			
			
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
